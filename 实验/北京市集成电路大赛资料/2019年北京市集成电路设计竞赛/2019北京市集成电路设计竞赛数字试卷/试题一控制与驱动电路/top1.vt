// Copyright (C) 1991-2008 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/12/2019 10:38:52"
                                                                                
// Verilog Test Bench template for design : top1
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module top1_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg flag_cs;
reg we_en;
reg rst;
// wires                                               
wire clk_cs;
wire rst_cs;
wire [2:0] state_o;

// assign statements (if any)                          
top1 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clk_cs(clk_cs),
	.flag_cs(flag_cs),
	.we_en(we_en),
	.rst(rst),
	.rst_cs(rst_cs),
	.state_o(state_o)
);
initial                                                
begin                                                  
#100 clk = 0;
	rst = 1;
	flag_cs = 0;
	we_en = 0;
#1000 rst = 0;	
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
# 100 clk = ~clk;                                           
end
always@(posedge clk)
begin              
	if(state_o==3'd2 ) 
		we_en <= 1'd1;
end 
endmodule

