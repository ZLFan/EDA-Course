// Copyright (C) 1991-2008 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/15/2019 09:42:15"
                                                                                
// Verilog Test Bench template for design : top4
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module top4_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [3:0] addr_in;
reg clk;
reg [7:0] data_in;
reg flag_cs;
reg we_en;
reg rst;
reg wr_data;
// wires                                               
wire clk_cs;
wire cs_o;
wire da_cs1;
wire da_cs2;
wire rst_cs;
wire [2:0] state_o;

// assign statements (if any)                          
top4 i1 (
// port map - connection between master ports and signals/registers   
	.addr_in(addr_in),
	.clk(clk),
	.clk_cs(clk_cs),
	.cs_o(cs_o),
	.da_cs1(da_cs1),
	.da_cs2(da_cs2),
	.data_in(data_in),
	.flag_cs(flag_cs),
	.we_en(we_en),
	.rst(rst),
	.rst_cs(rst_cs),
	.state_o(state_o),
	.wr_data(wr_data)
);
initial                                                
begin                                                  
#100 clk = 1'd0;
	rst = 1'd1;
	flag_cs = 1'd0;
	data_in = 8'd0;
	addr_in = 4'd0;
	wr_data = 1'd0;
	we_en = 1'd1;
#1000 rst = 1'd0;	
//	flag_cs = 1;
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
# 100 clk = ~clk;                                           
end         
reg [3:0]cnt1 = 4'd0;
reg [3:0]cnt2 = 4'd0;
always @(posedge clk_cs)
	begin
		if(cs_o == 1'd0)
			cnt1 <= cnt1 + 1;
		else
			cnt1 <= 4'd0;
		
		if(state_o == 3'd2)
			flag_cs <= 1'd0;
		else
			if(cnt1 == 4'd6)
				flag_cs <= 1'd1;
	end     
always @(posedge clk)
	if(rst)
		begin
			cnt2 <= 4'd0;
			data_in <= data_in;
			addr_in <= addr_in;
			wr_data <= 1'd0;
		end
	else
		begin
			if(cnt2 == 4'd10)
				wr_data <= 0;
			else
				begin
					data_in <= data_in + 8'd25;
					addr_in <= addr_in + 4'd3;
					wr_data <= 1'd1;
					cnt2 <= cnt2 + 1;
				end
		end
	                                             
endmodule

