// WARNING: Do NOT edit the input and output ports in this file in a text
// editor if you plan to continue editing the block that represents it in
// the Block Editor! File corruption is VERY likely to occur.

// Copyright (C) 1991-2005 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions
// and other software and tools, and its AMPP partner logic
// functions, and any output files any of the foregoing
// (including device programming or simulation files), and any
// associated documentation or information are expressly subject
// to the terms and conditions of the Altera Program License
// Subscription Agreement, Altera MegaCore Function License
// Agreement, or other applicable license agreement, including,
// without limitation, that your use is for the sole purpose of
// programming logic devices manufactured by Altera and sold by
// Altera or its authorized distributors.  Please refer to the
// applicable agreement for further details.


// Generated by Quartus II Version 5.1 (Build 170 10/3/2005)
// Created on Wed Oct 05 09:31:28 2005

//  Module Declaration
module state_m
    (
        // {{ALTERA_ARGS_BEGIN}} DO NOT REMOVE THIS LINE!
        clk, reset, newt, sel, follow, first
        // {{ALTERA_ARGS_END}} DO NOT REMOVE THIS LINE!
    );
    // Port Declaration
    // {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
    input clk, reset, newt;
    output follow, first;
    output [1:0]sel;
    // {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

    // Wire Declaration
    reg follow, first;
    reg [1:0] sel;
    reg [2:0] filter;

    parameter idle = 0, tap1 = 1, tap2 = 2, tap3 = 3, tap4 = 4;

    always
    begin
        case (filter)
            idle:
            begin
                sel = 2'b0;
                follow = 1'b0;
                first = 1'b0;
            end

            tap1:
            begin
                sel = 2'b0;
                follow = 1'b0;
                first = 1'b1;
            end

            tap2:
            begin
                sel = 2'b01;
                follow = 1'b0;
                first = 1'b0;
            end

            tap3:
            begin
                sel = 2'b10;
                follow = 1'b0;
                first = 1'b0;
            end

            tap4:
            begin
                sel = 2'b11;
                follow = 1'b1;
                first = 1'b0;
            end

            default :
            begin
                sel = 2'b00;
                follow = 1'b0;
                first = 1'b0;
            end
        endcase
    end


    always @(posedge clk or posedge reset)
    begin
        if (reset)
            filter = idle;
        else
        case (filter)
            idle:
            begin
                if (newt)
                    filter = tap1;
            end

            tap1:
            begin
                filter = tap2;
            end

            tap2:
            begin
                filter = tap3;
            end

            tap3:
            begin
                filter = tap4;
            end

            tap4:
            begin
                if (newt)
                    filter = tap1;
                else
                    filter = idle;
            end
        endcase

    end
endmodule
