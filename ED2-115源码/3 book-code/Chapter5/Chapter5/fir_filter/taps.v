// WARNING: Do NOT edit the input and output ports in this file in a text
// editor if you plan to continue editing the block that represents it in
// the Block Editor! File corruption is VERY likely to occur.

// Copyright (C) 1991-2005 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions
// and other software and tools, and its AMPP partner logic
// functions, and any output files any of the foregoing
// (including device programming or simulation files), and any
// associated documentation or information are expressly subject
// to the terms and conditions of the Altera Program License
// Subscription Agreement, Altera MegaCore Function License
// Agreement, or other applicable license agreement, including,
// without limitation, that your use is for the sole purpose of
// programming logic devices manufactured by Altera and sold by
// Altera or its authorized distributors.  Please refer to the
// applicable agreement for further details.


// Generated by Quartus II Version 5.1 (Build 170 10/3/2005)
// Created on Wed Oct 05 09:31:28 2005

//  Module Declaration
module taps
    (
        // {{ALTERA_ARGS_BEGIN}} DO NOT REMOVE THIS LINE!
        clk, reset, sel, newt, d, x
        // {{ALTERA_ARGS_END}} DO NOT REMOVE THIS LINE!
    );
    // Port Declaration
    // {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
    input clk;
    input reset;
    input [1:0] sel;
    input newt;
    input [7:0] d;
    output [7:0] x;
    // {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

    // Wire Declaration
    reg [7:0] x, xn, xn_1, xn_2, xn_3;

    // Register element
    always @(posedge clk or posedge reset)
    begin
        if (reset)
        begin
            xn = 8'b00000000;
            xn_1 = 8'b00000000;
            xn_2 = 8'b00000000;
            xn_3 = 8'b00000000;
        end
        else if (newt)
        begin
            xn_3 = xn_2;
            xn_2 = xn_1;
            xn_1 = xn;
            xn = d;
        end
    end

    // Mux element

    always @(sel or xn or xn_1 or xn_2 or xn_3)
    case (sel)
        2'b 00:
            x = xn;
        2'b 01:
            x = xn_1;
        2'b 10:
            x = xn_2;
        2'b 11:
            x = xn_3;
        default:
            x = 8'bXXXXXXXX;
    endcase

endmodule
