//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module LTM_spi(

    //////////// CLOCK //////////
    CLOCK_50,
    CLOCK2_50,
    CLOCK3_50,

    //////////// SW //////////
    SW,

    //////////// GPIO, GPIO connect to LTM - 4.3" LCD and Touch //////////
    LTM_ADC_BUSY,
    LTM_ADC_DCLK,
    LTM_ADC_DIN,
    LTM_ADC_DOUT,
    LTM_ADC_PENIRQ_n,
    LTM_B,
    LTM_DEN,
    LTM_G,
    LTM_GREST,
    LTM_HD,
    LTM_NCLK,
    LTM_R,
    LTM_SCEN,
    LTM_SDA,
    LTM_VD
);

//=======================================================
//  PARAMETER declarations
//=======================================================
parameter	CLK_Freq	=	50000000;	//	50	MHz
parameter	SPI_Freq	=	40000;		//	20	KHz
defparam	b2v_inst12.H_LINE = 1056;
defparam	b2v_inst12.Hsync_Blank = 216;
defparam	b2v_inst12.Hsync_Front_Porch = 40;
defparam	b2v_inst12.V_LINE = 525;
defparam	b2v_inst12.Vertical_Back_Porch = 35;
defparam	b2v_inst12.Vertical_Front_Porch = 10;

//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input		          		CLOCK_50;
input		          		CLOCK2_50;
input		          		CLOCK3_50;

//////////// SW //////////
input		    [17:0]		SW;

//////////// GPIO, GPIO connect to LTM - 4.3" LCD and Touch //////////
input		          		LTM_ADC_BUSY;
output		          		LTM_ADC_DCLK;
output		          		LTM_ADC_DIN;
input		          		LTM_ADC_DOUT;
input		          		LTM_ADC_PENIRQ_n;
output		     [7:0]		LTM_B;
output		          		LTM_DEN;
output		     [7:0]		LTM_G;
output		          		LTM_GREST;
output		          		LTM_HD;
output		          		LTM_NCLK;
output		     [7:0]		LTM_R;
output		          		LTM_SCEN;
inout		          		LTM_SDA;
output		          		LTM_VD;


//=======================================================
//  REG/WIRE declarations
//=======================================================
reg mSPI_CLK;
reg [15:0] mSPI_CLK_DIV;
wire iRST_n;
wire [7:0] Red,Green,Blue;
wire [10:0] X,Y;

//=======================================================
//  Structural coding
//=======================================================
assign iRST_n = ~SW[17];

//	Serial Clock Generator
always @(posedge CLOCK_50 or negedge iRST_n)
begin
    if(!iRST_n)
    begin
        mSPI_CLK	<=	0;
        mSPI_CLK_DIV	<=	0;
    end
    else
    begin
        if( mSPI_CLK_DIV	< (CLK_Freq/SPI_Freq) )
            mSPI_CLK_DIV	<=	mSPI_CLK_DIV+1;
        else
        begin
            mSPI_CLK_DIV	<=	0;
            mSPI_CLK		<=	~mSPI_CLK;
        end
    end
end

spi_write    spi0 (	
            .CLK(mSPI_CLK),
						.SPC(LTM_ADC_DCLK),
						.SDAT(LTM_SDA),
						.regdata({6'h04,2'b01,6'b000101,SW[1],SW[0]}),
            .GO(SW[16]),
						.ORDY(),
						.reset(SW[17]),
						.SCEN(LTM_SCEN));

block_generator pp_inst (
            .iclk(CLOCK_50),
            .iRST_N(~SW[17]),
            .iX(X),
            .iY(Y),
            .oRed(Red),
            .oGreen(Green),
            .oBlue(Blue));

LTM_timing_control b2v_inst12 (
            .iCLK(CLOCK_50),
            .iRST_n(~SW[17]),
            .Key(1'b1),
            .i_RGB_EN(3'b111),
            .iBlue(Blue),
            .iGreen(Green),
            .iRed(Red),
            .oHD(LTM_HD),
            .oVD(LTM_VD),
            .oDEN(LTM_DEN),
            .gmRST(LTM_GREST),
            .oVGA_CLOCK(LTM_NCLK),
            .oCoord_X(X),
            .oCoord_Y(Y),
            .oLCD_B(LTM_B),
            .oLCD_G(LTM_G),
            .oLCD_R(LTM_R));
endmodule
