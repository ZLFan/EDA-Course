// WARNING: Do NOT edit the input and output ports in this file in a text
// editor if you plan to continue editing the block that represents it in
// the Block Editor! File corruption is VERY likely to occur.

// Copyright (C) 1991-2005 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions
// and other software and tools, and its AMPP partner logic
// functions, and any output files any of the foregoing
// (including device programming or simulation files), and any
// associated documentation or information are expressly subject
// to the terms and conditions of the Altera Program License
// Subscription Agreement, Altera MegaCore Function License
// Agreement, or other applicable license agreement, including,
// without limitation, that your use is for the sole purpose of
// programming logic devices manufactured by Altera and sold by
// Altera or its authorized distributors.  Please refer to the
// applicable agreement for further details.


// Generated by Quartus II Version 5.1 (Build 170 10/3/2005)
// Created on Wed Oct 05 09:31:28 2005

//  Module Declaration
module acc
    (
        // {{ALTERA_ARGS_BEGIN}} DO NOT REMOVE THIS LINE!
        xh, clk, first, yn
        // {{ALTERA_ARGS_END}} DO NOT REMOVE THIS LINE!
    );
    // Port Declaration

    // {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
    input [10:0] xh;
    input clk;
    input first;
    output [7:0] yn;
    // {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

    reg [7:0]yn;
    reg [11:0] ynm, result, a_in;
    wire [11:0] inter;

    // Describe Multiplexer

    always @(first or result)
    begin
        case (first)
            1'b 0:
                ynm = result;
            1'b 1:
                ynm = 12'b000000000000;
        endcase
    end

    always @(posedge clk)
    begin
        result = inter;
    end

    always @(xh)
    begin
        a_in[10:0] = (xh);
        a_in[11] = 0;
    end

    always @(result)
    begin
        yn[7:0] = result[11:4];
    end

    accum inst_1(.dataa(a_in), .datab(ynm), .result(inter));

endmodule
